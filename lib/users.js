// Generated by CoffeeScript 1.10.0
(function() {
  var DomoClient, DomoUser, DomoUserClient, request,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  request = require('request');

  DomoClient = require('./Client');

  DomoUserClient = (function(superClass) {
    extend(DomoUserClient, superClass);

    function DomoUserClient(options) {
      if (options == null) {
        options = {};
      }
      if (options.scope == null) {
        options.scope = 'user';
      }
      DomoUserClient.__super__.constructor.call(this, options);
    }

    DomoUserClient.prototype.listUsers = function(options, callback) {
      var req;
      if (options == null) {
        options = {};
      }
      req = {
        method: 'GET',
        uri: 'https://api.domo.com/v1/users',
        qs: {
          sort: options.sort,
          fields: options.fields,
          page: options.page,
          entries: options.entries
        }
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoUserClient.prototype.getUser = function(id, options, callback) {
      var req;
      if (options == null) {
        options = {};
      }
      req = {
        method: 'GET',
        uri: "https://api.domo.com/v1/users/" + id,
        qs: {
          name: options.name,
          fields: options.fields
        }
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoUserClient.prototype.updateUser = function(id, user, callback) {
      var req;
      req = {
        method: 'PUT',
        uri: "https://api.domo.com/v1/users/" + id,
        headers: {
          'content-type': 'application/json',
          accept: 'application/json'
        },
        body: JSON.stringify(user)
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoUserClient.prototype.deleteUser = function(id, callback) {
      var req;
      req = {
        method: 'DELETE',
        uri: "https://api.domo.com/v1/users/" + id
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoUserClient.prototype.createUser = function(user, callback) {
      var req;
      req = {
        method: 'POST',
        uri: "https://api.domo.com/v1/users",
        headers: {
          'content-type': 'application/json',
          accept: 'application/json'
        },
        body: JSON.stringify(user)
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    return DomoUserClient;

  })(DomoClient);

  DomoUser = (function() {
    function DomoUser(options) {
      var k, v;
      if (options == null) {
        options = {};
      }
      if (options.id == null) {
        options.id = null;
      }
      if (options.title == null) {
        options.title = null;
      }
      if (options.email == null) {
        options.email = null;
      }
      if (options.role == null) {
        options.role = null;
      }
      if (options.name == null) {
        options.name = null;
      }
      if (options.phone == null) {
        options.phone = null;
      }
      if (options.links == null) {
        options.links = [];
      }
      for (k in options) {
        v = options[k];
        this[k] = v;
      }
    }

    return DomoUser;

  })();

  module.exports = {
    UserClient: DomoUserClient,
    User: DomoUser
  };

}).call(this);
