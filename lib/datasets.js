// Generated by CoffeeScript 1.10.0
(function() {
  var DOMO_COLUMN_TYPES, DomoClient, DomoDataClient, DomoDataSetMetaData,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DomoClient = require('./Client');

  DOMO_COLUMN_TYPES = {
    STRING: 'STRING',
    DOUBLE: 'DOUBLE',
    LONG: 'LONG',
    DATE: 'DATE',
    DATETIME: 'DATETIME',
    DECIMAL: 'DECIMAL'
  };

  DomoDataClient = (function(superClass) {
    extend(DomoDataClient, superClass);

    function DomoDataClient(options) {
      if (options == null) {
        options = {};
      }
      if (options.scope == null) {
        options.scope = 'data';
      }
      DomoDataClient.__super__.constructor.call(this, options);
    }

    DomoDataClient.prototype.createDataSet = function(dataset, callback) {
      var req, reqbody;
      if (typeof dataset === 'object') {
        if ((dataset != null ? dataset.getFieldsObject : void 0) != null) {
          reqbody = JSON.stringify(dataset.getFieldsObject());
        } else {
          reqbody = JSON.stringify(dataset);
        }
      } else {
        reqbody = dataset;
      }
      req = {
        method: 'POST',
        uri: "https://api.domo.com/v1/datasets",
        headers: {
          'content-type': 'application/json',
          accept: 'application/json'
        },
        body: reqbody
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoDataClient.prototype.deleteDataSet = function(id, callback) {
      var req;
      if (typeof id === 'object' && (id.id != null)) {
        id = id.id;
      }
      req = {
        method: 'DELETE',
        uri: "https://api.domo.com/v1/datasets/" + id
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoDataClient.prototype.updateDataSet = function(id, dataset, callback) {
      var req, reqbody;
      if (typeof id === 'object' && (id.id != null)) {
        if (typeof dataset === 'function') {
          callback = dataset;
        }
        dataset = id;
        id = id.id;
      }
      if (typeof dataset === 'object') {
        if ((dataset != null ? dataset.getFieldsObject : void 0) != null) {
          reqbody = JSON.stringify(dataset.getFieldsObject());
        } else {
          reqbody = JSON.stringify(dataset);
        }
      } else {
        reqbody = dataset;
      }
      req = {
        method: 'PUT',
        uri: "https://api.domo.com/v1/datasets",
        headers: {
          'content-type': 'application/json',
          accept: 'application/json'
        },
        body: reqbody
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoDataClient.prototype.getDataSet = function(id, options, callback) {
      var req;
      if (options == null) {
        options = {};
      }
      if (typeof id === 'object' && (id.id != null)) {
        id = id.id;
      }
      req = {
        method: 'GET',
        uri: "https://api.domo.com/v1/datasets/" + id,
        qs: {
          fields: options.fields
        }
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          var metadata;
          if (error) {
            return callback(error, response, body);
          }
          metadata = new DomoDataSetMetaData(body);
          return callback(error, response, metadata);
        };
      })(this));
    };

    DomoDataClient.prototype.listDataSets = function(options, callback) {
      var req;
      if (options == null) {
        options = {};
      }
      req = {
        method: 'GET',
        uri: "https://api.domo.com/v1/datasets",
        qs: {
          sort: options.sort,
          fields: options.fields,
          offset: options.offset,
          limit: options.limit
        }
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          var dataset, dslist, i, len;
          if (error) {
            return callback(error, response, body);
          }
          dslist = [];
          for (i = 0, len = body.length; i < len; i++) {
            dataset = body[i];
            dslist.push(new DomoDataSetMetaData(dataset));
          }
          return callback(error, response, dslist);
        };
      })(this));
    };

    DomoDataClient.prototype.pullData = function(id, callback) {
      var req;
      if (typeof id === 'object' && (id.id != null)) {
        id = id.id;
      }
      req = {
        method: 'GET',
        uri: "https://api.domo.com/v1/datasets/" + id + "/data",
        headers: {
          accept: 'text/csv'
        }
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    DomoDataClient.prototype.pushData = function(id, options, callback) {
      var req;
      if (options == null) {
        options = {};
      }
      if (typeof id === 'object' && (id.id != null)) {
        id = id.id;
      }
      req = {
        method: 'PUT',
        uri: "https://api.domo.com/v1/datasets/" + id + "/data",
        qs: {
          append: options.append
        },
        headers: {
          accept: 'text/csv'
        }
      };
      return this.request(req, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error, response, body);
          }
          return callback(error, response, body);
        };
      })(this));
    };

    return DomoDataClient;

  })(DomoClient);

  DomoDataSetMetaData = (function() {
    DomoDataSetMetaData.EDITABLE_FIELDS = ['name', 'description', 'schema'];

    function DomoDataSetMetaData(options) {
      var k, v;
      if (options == null) {
        options = {};
      }
      for (k in options) {
        v = options[k];
        this[k] = v;
      }
    }

    DomoDataSetMetaData.prototype.getColumnHeaders = function() {
      var column, headers, i, len, ref, ref1;
      headers = [];
      ref1 = (ref = this.schema) != null ? ref.columns : void 0;
      for (i = 0, len = ref1.length; i < len; i++) {
        column = ref1[i];
        headers.push(column.name);
      }
      return headers;
    };

    DomoDataSetMetaData.prototype.getFieldsObject = function() {
      var field, fields, i, len, ref;
      fields = {};
      ref = DomoDataSetMetaData.EDITABLE_FIELDS;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if (this[field] != null) {
          fields[field] = this[field];
        }
      }
      return fields;
    };

    return DomoDataSetMetaData;

  })();

  module.exports = {
    DataClient: DomoDataClient,
    DataSetMetaData: DomoDataSetMetaData,
    COLUMN_TYPES: DOMO_COLUMN_TYPES
  };

}).call(this);
